% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pathfinding.R
\name{pathfinding}
\alias{pathfinding}
\title{Pathfinding using Dijkstra's algorithm}
\usage{
pathfinding(
  multi_layered_network_file,
  source_node,
  target_node,
  output_directory,
  file_type = c("csv", "tsv")
)
}
\arguments{
\item{multi_layered_network_file}{A character string specifying the path to the
integrated multi-layered network data file (e.g., output
from `construct_multi_layered_network`). Expected columns: 'Feature1',
'Feature2', 'edge_score' (numeric), and 'edge_type'.}

\item{source_node}{A character string specifying the name of the starting node
for pathfinding. This node must exist in the network.}

\item{target_node}{A character string specifying the name of the ending node
for pathfinding. This node must exist in the network.}

\item{output_directory}{A character string specifying the path to the directory
where the shortest path results will be saved as a CSV file. The directory
will be created if it does not exist.}

\item{file_type}{A character string indicating the type of input file.
Must be "csv" (for comma-separated) or "tsv" (for tab-separated).}
}
\value{
The function's primary output is a CSV file saved
   to the specified `output_directory`, detailing the edges of the shortest path
   found between the source and target nodes. If no path is found, `NULL` is returned
   invisibly and a message is printed.
}
\description{
This function identifies the shortest path between a specified source node
and a target node within a multi-layered network using Dijkstra's algorithm.
}
\details{
The edge weights are transformed from `edge_score` as follows:
- `edge_score` is first converted to its absolute value to ensure non-negative weights.
- If the absolute `edge_score` is `NA`, weight is `Inf`.
- If the absolute `edge_score` is less than 1, weight is `1 / absolute_edge_score`.
- If the absolute `edge_score` is exactly 1, weight is `1 / (absolute_edge_score + 0.1)` to avoid `1/1=1` which might not be ideal for shortest path.
- If the absolute `edge_score` is greater than 1, weight is `absolute_edge_score`.
This transformation aims to represent stronger connections (higher `edge_score`)
as shorter paths (lower weights), ensuring all weights are non-negative for Dijkstra's algorithm.
}
\references{
Dijkstra EW. A note on two problems in connexion with graphs.Â  Edsger Wybe Dijkstra: his life, work, and legacy2022. p. 287-90.
}
